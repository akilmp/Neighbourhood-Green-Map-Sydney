datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(user)
  spots        Spot[]
  reports      Report[]
  auditLogs    AuditLog[]
  votes        Vote[]

  emailVerified Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Spot {
  id          String       @id @default(uuid())
  name        String
  description String?
  location    Unsupported("geometry(Point, 4326)")
  facilities  Json         @default("{}")
  category    SpotCategory
  isPublished Boolean      @default(false)
  photos      SpotPhoto[]
  tags        SpotTag[]
  votes       Vote[]
  reports     Report[]

  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([location], type: Gist)
}

model SpotPhoto {
  id        String   @id @default(uuid())
  url       String
  spot      Spot     @relation(fields: [spotId], references: [id])
  spotId    String
  createdAt DateTime @default(now())
}

model Tag {
  id    String   @id @default(uuid())
  name  String   @unique
  spots SpotTag[]
}

model SpotTag {
  spot   Spot @relation(fields: [spotId], references: [id])
  spotId String
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  String

  @@id([spotId, tagId])
}

model Vote {
  user      User @relation(fields: [userId], references: [id])
  userId    String
  spot      Spot @relation(fields: [spotId], references: [id])
  spotId    String
  value     Int
  createdAt DateTime @default(now())

  @@id([userId, spotId])
}

model Report {
  id        String       @id @default(uuid())
  spot      Spot         @relation(fields: [spotId], references: [id])
  spotId    String
  user      User?        @relation(fields: [userId], references: [id])
  userId    String?
  reason    String
  status    ReportStatus @default(pending)
  createdAt DateTime     @default(now())
  auditLogs AuditLog[]
}

model AuditLog {
  id        String   @id @default(uuid())
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  createdAt DateTime @default(now())

}

enum SpotCategory {
  park
  garden
  walk
  lookout
  playground
  beach
  other
}

enum UserRole {
  user
  admin
}

enum ReportStatus {
  pending
  approved
  rejected
}
